00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a23 696e 636c  <string.h>.#incl
00000040: 7564 6520 3c63 7479 7065 2e68 3e0a 0a23  ude <ctype.h>..#
00000050: 6465 6669 6e65 2054 5255 4520 310a 2364  define TRUE 1.#d
00000060: 6566 696e 6520 4641 4c53 4520 300a 2364  efine FALSE 0.#d
00000070: 6566 696e 6520 4241 445f 4e55 4d42 4552  efine BAD_NUMBER
00000080: 5f41 5247 5320 310a 0a2f 2a2a 0a20 2a20  _ARGS 1../**. * 
00000090: 5061 7273 6573 2074 6865 2063 6f6d 6d61  Parses the comma
000000a0: 6e64 206c 696e 652e 0a20 2a0a 202a 2061  nd line.. *. * a
000000b0: 7267 633a 2074 6865 206e 756d 6265 7220  rgc: the number 
000000c0: 6f66 2069 7465 6d73 206f 6e20 7468 6520  of items on the 
000000d0: 636f 6d6d 616e 6420 6c69 6e65 2028 616e  command line (an
000000e0: 6420 6c65 6e67 7468 206f 6620 7468 650a  d length of the.
000000f0: 202a 2020 2020 2020 2061 7267 7620 6172   *       argv ar
00000100: 7261 7929 2069 6e63 6c75 6469 6e67 2074  ray) including t
00000110: 6865 2065 7865 6375 7461 626c 650a 202a  he executable. *
00000120: 2061 7267 763a 2074 6865 2061 7272 6179   argv: the array
00000130: 206f 6620 6172 6775 6d65 6e74 7320 6173   of arguments as
00000140: 2073 7472 696e 6773 2028 6368 6172 2a20   strings (char* 
00000150: 6172 7261 7929 0a20 2a20 6269 7473 3a20  array). * bits: 
00000160: 7468 6520 696e 7465 6765 7220 7661 6c75  the integer valu
00000170: 6520 6973 2073 6574 2074 6f20 5452 5545  e is set to TRUE
00000180: 2069 6620 6269 7473 206f 7574 7075 7420   if bits output 
00000190: 696e 6469 6361 7465 640a 202a 2020 2020  indicated. *    
000001a0: 2020 206f 7574 6865 7277 6973 6520 4641     outherwise FA
000001b0: 4c53 4520 666f 7220 6865 7820 6f75 7470  LSE for hex outp
000001c0: 7574 0a20 2a0a 202a 2072 6574 7572 6e73  ut. *. * returns
000001d0: 2074 6865 2069 6e70 7574 2066 696c 6520   the input file 
000001e0: 706f 696e 7465 7220 2846 494c 452a 290a  pointer (FILE*).
000001f0: 202a 2a2f 0a46 494c 4520 2a70 6172 7365   **/.FILE *parse
00000200: 436f 6d6d 616e 644c 696e 6528 696e 7420  CommandLine(int 
00000210: 6172 6763 2c20 6368 6172 202a 2a61 7267  argc, char **arg
00000220: 762c 2069 6e74 202a 6269 7473 2920 7b0a  v, int *bits) {.
00000230: 2020 6966 2028 6172 6763 203e 2032 2920    if (argc > 2) 
00000240: 7b0a 2020 2020 7072 696e 7466 2822 5573  {.    printf("Us
00000250: 6167 653a 2025 7320 5b2d 627c 2d62 6974  age: %s [-b|-bit
00000260: 735d 5c6e 222c 2061 7267 765b 305d 293b  s]\n", argv[0]);
00000270: 0a20 2020 2065 7869 7428 4241 445f 4e55  .    exit(BAD_NU
00000280: 4d42 4552 5f41 5247 5329 3b0a 2020 7d0a  MBER_ARGS);.  }.
00000290: 0a20 2069 6620 2861 7267 6320 3d3d 2032  .  if (argc == 2
000002a0: 2026 260a 2020 2020 2020 2873 7472 636d   &&.      (strcm
000002b0: 7028 6172 6776 5b31 5d2c 2022 2d62 2229  p(argv[1], "-b")
000002c0: 203d 3d20 3020 7c7c 2073 7472 636d 7028   == 0 || strcmp(
000002d0: 6172 6776 5b31 5d2c 2022 2d62 6974 7322  argv[1], "-bits"
000002e0: 2920 3d3d 2030 2929 207b 0a20 2020 202a  ) == 0)) {.    *
000002f0: 6269 7473 203d 2054 5255 453b 0a20 207d  bits = TRUE;.  }
00000300: 2065 6c73 6520 7b0a 2020 2020 2a62 6974   else {.    *bit
00000310: 7320 3d20 4641 4c53 453b 0a20 207d 0a0a  s = FALSE;.  }..
00000320: 2020 7265 7475 726e 2073 7464 696e 3b0a    return stdin;.
00000330: 7d0a 0a2f 2a2a 0a20 2a20 5772 6974 6573  }../**. * Writes
00000340: 2064 6174 6120 746f 2073 7464 6f75 7420   data to stdout 
00000350: 696e 2068 6578 6164 6563 696d 616c 2e0a  in hexadecimal..
00000360: 202a 0a20 2a20 5365 6520 6d79 7878 642e   *. * See myxxd.
00000370: 6d64 2066 6f72 2064 6574 6169 6c73 2e0a  md for details..
00000380: 202a 0a20 2a20 6461 7461 3a20 616e 2061   *. * data: an a
00000390: 7272 6179 206f 6620 6e6f 206d 6f72 6520  rray of no more 
000003a0: 7468 616e 2031 3620 6368 6172 6163 7465  than 16 characte
000003b0: 7273 0a20 2a20 7369 7a65 3a20 7468 6520  rs. * size: the 
000003c0: 7369 7a65 206f 6620 7468 6520 6172 7261  size of the arra
000003d0: 790a 202a 2a2f 0a76 6f69 6420 7072 696e  y. **/.void prin
000003e0: 7444 6174 6141 7348 6578 2875 6e73 6967  tDataAsHex(unsig
000003f0: 6e65 6420 6368 6172 202a 6461 7461 2c20  ned char *data, 
00000400: 7369 7a65 5f74 2073 697a 6529 207b 0a20  size_t size) {. 
00000410: 202f 2f70 7269 6e74 6628 2254 4f44 4f20   //printf("TODO 
00000420: 313a 2070 7269 6e74 4461 7461 4173 4865  1: printDataAsHe
00000430: 7820 2832 2922 293b 0a20 2066 6f72 2028  x (2)");.  for (
00000440: 7369 7a65 5f74 2069 203d 2030 3b20 6920  size_t i = 0; i 
00000450: 3c20 7369 7a65 3b20 2b2b 6929 207b 0a20  < size; ++i) {. 
00000460: 2020 2020 6966 2869 2532 203d 3d20 3029      if(i%2 == 0)
00000470: 207b 0a20 2020 2020 2020 7072 696e 7466   {.       printf
00000480: 2822 2022 293b 0a20 2020 2020 7d0a 2020  (" ");.     }.  
00000490: 2020 2070 7269 6e74 6628 2225 3032 7822     printf("%02x"
000004a0: 2c20 6461 7461 5b69 5d29 3b0a 2020 7d0a  , data[i]);.  }.
000004b0: 0a20 2066 6f72 2028 7369 7a65 5f74 2069  .  for (size_t i
000004c0: 203d 2073 697a 653b 2069 203c 2031 363b   = size; i < 16;
000004d0: 202b 2b69 2920 7b0a 2020 2020 6966 2869   ++i) {.    if(i
000004e0: 2532 203d 3d20 3029 207b 0a20 2020 2020  %2 == 0) {.     
000004f0: 2070 7269 6e74 6628 2220 2020 2229 3b0a   printf("   ");.
00000500: 2020 2020 7d20 656c 7365 207b 0a20 2020      } else {.   
00000510: 2020 2070 7269 6e74 6628 2220 2022 293b     printf("  ");
00000520: 0a20 2020 207d 0a20 207d 0a7d 0a0a 2f2a  .    }.  }.}../*
00000530: 2a0a 202a 2057 7269 7465 7320 6461 7461  *. * Writes data
00000540: 2074 6f20 7374 646f 7574 2061 7320 6368   to stdout as ch
00000550: 6172 6163 7465 7273 2e0a 202a 0a20 2a20  aracters.. *. * 
00000560: 5365 6520 6d79 7878 642e 6d64 2066 6f72  See myxxd.md for
00000570: 2064 6574 6169 6c73 2e0a 202a 0a20 2a20   details.. *. * 
00000580: 6461 7461 3a20 616e 2061 7272 6179 206f  data: an array o
00000590: 6620 6e6f 206d 6f72 6520 7468 616e 2031  f no more than 1
000005a0: 3620 6368 6172 6163 7465 7273 0a20 2a20  6 characters. * 
000005b0: 7369 7a65 3a20 7468 6520 7369 7a65 206f  size: the size o
000005c0: 6620 7468 6520 6172 7261 790a 202a 2a2f  f the array. **/
000005d0: 0a76 6f69 6420 7072 696e 7444 6174 6141  .void printDataA
000005e0: 7343 6861 7273 2875 6e73 6967 6e65 6420  sChars(unsigned 
000005f0: 6368 6172 202a 6461 7461 2c20 7369 7a65  char *data, size
00000600: 5f74 2073 697a 6529 207b 0a20 202f 2f70  _t size) {.  //p
00000610: 7269 6e74 6628 2254 4f44 4f20 323a 2070  rintf("TODO 2: p
00000620: 7269 6e74 4461 7461 4173 4368 6172 7320  rintDataAsChars 
00000630: 2833 2922 293b 0a20 2066 6f72 2028 7369  (3)");.  for (si
00000640: 7a65 5f74 2069 203d 2030 3b20 6920 3c20  ze_t i = 0; i < 
00000650: 7369 7a65 3b20 2b2b 6929 207b 0a20 2020  size; ++i) {.   
00000660: 2070 7269 6e74 6628 2225 6322 2c20 2869   printf("%c", (i
00000670: 7370 7269 6e74 2864 6174 615b 695d 2920  sprint(data[i]) 
00000680: 3f20 6461 7461 205b 695d 203a 2027 2e27  ? data [i] : '.'
00000690: 2929 3b0a 2020 7d0a 7d0a 0a76 6f69 6420  ));.  }.}..void 
000006a0: 7265 6164 416e 6450 7269 6e74 496e 7075  readAndPrintInpu
000006b0: 7441 7348 6578 2846 494c 4520 2a69 6e70  tAsHex(FILE *inp
000006c0: 7574 2920 7b0a 2020 756e 7369 676e 6564  ut) {.  unsigned
000006d0: 2063 6861 7220 6461 7461 5b31 365d 3b0a   char data[16];.
000006e0: 2020 696e 7420 6e75 6d42 7974 6573 5265    int numBytesRe
000006f0: 6164 203d 2066 7265 6164 2864 6174 612c  ad = fread(data,
00000700: 2031 2c20 3136 2c20 696e 7075 7429 3b0a   1, 16, input);.
00000710: 2020 756e 7369 676e 6564 2069 6e74 206f    unsigned int o
00000720: 6666 7365 7420 3d20 303b 0a20 2077 6869  ffset = 0;.  whi
00000730: 6c65 2028 6e75 6d42 7974 6573 5265 6164  le (numBytesRead
00000740: 2021 3d20 3029 207b 0a20 2020 2070 7269   != 0) {.    pri
00000750: 6e74 6628 2225 3038 783a 222c 206f 6666  ntf("%08x:", off
00000760: 7365 7429 3b0a 2020 2020 6f66 6673 6574  set);.    offset
00000770: 202b 3d20 6e75 6d42 7974 6573 5265 6164   += numBytesRead
00000780: 3b0a 2020 2020 7072 696e 7444 6174 6141  ;.    printDataA
00000790: 7348 6578 2864 6174 612c 206e 756d 4279  sHex(data, numBy
000007a0: 7465 7352 6561 6429 3b0a 2020 2020 7072  tesRead);.    pr
000007b0: 696e 7466 2822 2020 2229 3b0a 2020 2020  intf("  ");.    
000007c0: 7072 696e 7444 6174 6141 7343 6861 7273  printDataAsChars
000007d0: 2864 6174 612c 206e 756d 4279 7465 7352  (data, numBytesR
000007e0: 6561 6429 3b0a 2020 2020 7072 696e 7466  ead);.    printf
000007f0: 2822 5c6e 2229 3b0a 2020 2020 6e75 6d42  ("\n");.    numB
00000800: 7974 6573 5265 6164 203d 2066 7265 6164  ytesRead = fread
00000810: 2864 6174 612c 2031 2c20 3136 2c20 696e  (data, 1, 16, in
00000820: 7075 7429 3b0a 2020 7d0a 7d0a 0a76 6f69  put);.  }.}..voi
00000830: 6420 7072 696e 7444 6174 6141 7343 6861  d printDataAsCha
00000840: 7273 466f 7242 6974 7328 756e 7369 676e  rsForBits(unsign
00000850: 6564 2063 6861 7220 2a64 6174 612c 2073  ed char *data, s
00000860: 697a 655f 7420 7369 7a65 2920 7b0a 2020  ize_t size) {.  
00000870: 2f2f 7072 696e 7466 2822 544f 444f 2032  //printf("TODO 2
00000880: 3a20 7072 696e 7444 6174 6141 7343 6861  : printDataAsCha
00000890: 7273 2028 3329 2229 3b0a 2020 666f 7220  rs (3)");.  for 
000008a0: 2873 697a 655f 7420 6920 3d20 303b 2069  (size_t i = 0; i
000008b0: 203c 2073 697a 653b 202b 2b69 2920 7b0a   < size; ++i) {.
000008c0: 2020 2020 7072 696e 7466 2822 2563 222c      printf("%c",
000008d0: 2028 6973 7072 696e 7428 6461 7461 5b69   (isprint(data[i
000008e0: 5d29 203f 2064 6174 6120 5b69 5d20 3a20  ]) ? data [i] : 
000008f0: 272e 2729 293b 0a20 207d 0a7d 0a0a 766f  '.'));.  }.}..vo
00000900: 6964 2070 7269 6e74 4461 7461 4173 4269  id printDataAsBi
00000910: 7473 2875 6e73 6967 6e65 6420 6368 6172  ts(unsigned char
00000920: 202a 6461 7461 2c20 7369 7a65 5f74 2073   *data, size_t s
00000930: 697a 6529 207b 0a20 2066 6f72 2028 696e  ize) {.  for (in
00000940: 7420 6920 3d20 303b 2069 203c 2073 697a  t i = 0; i < siz
00000950: 653b 202b 2b69 2920 7b0a 2020 2020 666f  e; ++i) {.    fo
00000960: 7220 2869 6e74 206a 203d 2037 3b20 6a20  r (int j = 7; j 
00000970: 3e3d 2030 3b20 2d2d 6a29 207b 0a20 2020  >= 0; --j) {.   
00000980: 2020 2070 7269 6e74 6628 2225 6422 2c20     printf("%d", 
00000990: 2864 6174 615b 695d 203e 3e20 6a29 2026  (data[i] >> j) &
000009a0: 3129 3b0a 2020 2020 7d0a 2020 2020 7072  1);.    }.    pr
000009b0: 696e 7466 2822 2022 293b 0a20 207d 0a20  intf(" ");.  }. 
000009c0: 2066 6f72 2028 696e 7420 6920 3d20 7369   for (int i = si
000009d0: 7a65 3b20 6920 3c20 363b 202b 2b69 2920  ze; i < 6; ++i) 
000009e0: 7b0a 2020 2020 7072 696e 7466 2822 2020  {.    printf("  
000009f0: 2020 2020 2020 2022 293b 0a20 207d 0a7d         ");.  }.}
00000a00: 0a0a 2f2a 2a0a 202a 2042 6974 7320 6f75  ../**. * Bits ou
00000a10: 7470 7574 2066 6f72 2078 7864 2e0a 202a  tput for xxd.. *
00000a20: 0a20 2a20 5365 6520 6d79 7878 642e 6d64  . * See myxxd.md
00000a30: 2066 6f72 2064 6574 6169 6c73 2e0a 202a   for details.. *
00000a40: 0a20 2a20 696e 7075 743a 2069 6e70 7574  . * input: input
00000a50: 2073 7472 6561 6d0a 202a 2a2f 0a76 6f69   stream. **/.voi
00000a60: 6420 7265 6164 416e 6450 7269 6e74 496e  d readAndPrintIn
00000a70: 7075 7441 7342 6974 7328 4649 4c45 202a  putAsBits(FILE *
00000a80: 696e 7075 7429 207b 0a20 202f 2f70 7269  input) {.  //pri
00000a90: 6e74 6628 2254 4f44 4f20 333a 2072 6561  ntf("TODO 3: rea
00000aa0: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
00000ab0: 4269 7473 5c6e 2229 3b0a 2020 756e 7369  Bits\n");.  unsi
00000ac0: 676e 6564 2063 6861 7220 6461 7461 5b31  gned char data[1
00000ad0: 365d 3b0a 2020 696e 7420 6e75 6d42 7974  6];.  int numByt
00000ae0: 6573 5265 6164 203d 2066 7265 6164 2864  esRead = fread(d
00000af0: 6174 612c 2031 2c20 362c 2069 6e70 7574  ata, 1, 6, input
00000b00: 293b 0a20 2075 6e73 6967 6e65 6420 696e  );.  unsigned in
00000b10: 7420 6f66 6673 6574 203d 2030 3b0a 0a20  t offset = 0;.. 
00000b20: 2077 6869 6c65 2028 6e75 6d42 7974 6573   while (numBytes
00000b30: 5265 6164 2021 3d30 2920 7b0a 2020 2020  Read !=0) {.    
00000b40: 7072 696e 7466 2822 2530 3878 3a20 222c  printf("%08x: ",
00000b50: 206f 6666 7365 7429 3b0a 2020 2020 6f66   offset);.    of
00000b60: 6673 6574 202b 3d20 6e75 6d42 7974 6573  fset += numBytes
00000b70: 5265 6164 3b0a 2020 2020 7072 696e 7444  Read;.    printD
00000b80: 6174 6141 7342 6974 7328 6461 7461 2c20  ataAsBits(data, 
00000b90: 6e75 6d42 7974 6573 5265 6164 293b 0a20  numBytesRead);. 
00000ba0: 2020 2070 7269 6e74 6628 2220 2229 3b0a     printf(" ");.
00000bb0: 2020 2020 7072 696e 7444 6174 6141 7343      printDataAsC
00000bc0: 6861 7273 466f 7242 6974 7328 6461 7461  harsForBits(data
00000bd0: 2c20 6e75 6d42 7974 6573 5265 6164 293b  , numBytesRead);
00000be0: 0a20 2020 2070 7269 6e74 6628 225c 6e22  .    printf("\n"
00000bf0: 293b 0a20 2020 206e 756d 4279 7465 7352  );.    numBytesR
00000c00: 6561 6420 3d20 6672 6561 6428 6461 7461  ead = fread(data
00000c10: 2c20 312c 2036 2c20 696e 7075 7429 3b0a  , 1, 6, input);.
00000c20: 2020 7d0a 7d0a 0a69 6e74 206d 6169 6e28    }.}..int main(
00000c30: 696e 7420 6172 6763 2c20 6368 6172 202a  int argc, char *
00000c40: 2a61 7267 7629 207b 0a20 2069 6e74 2062  *argv) {.  int b
00000c50: 6974 7320 3d20 4641 4c53 453b 0a20 2046  its = FALSE;.  F
00000c60: 494c 4520 2a69 6e70 7574 203d 2070 6172  ILE *input = par
00000c70: 7365 436f 6d6d 616e 644c 696e 6528 6172  seCommandLine(ar
00000c80: 6763 2c20 6172 6776 2c20 2662 6974 7329  gc, argv, &bits)
00000c90: 3b0a 0a20 2069 6620 2862 6974 7320 3d3d  ;..  if (bits ==
00000ca0: 2046 414c 5345 2920 7b0a 2020 2020 7265   FALSE) {.    re
00000cb0: 6164 416e 6450 7269 6e74 496e 7075 7441  adAndPrintInputA
00000cc0: 7348 6578 2869 6e70 7574 293b 0a20 207d  sHex(input);.  }
00000cd0: 2065 6c73 6520 7b0a 2020 2020 7265 6164   else {.    read
00000ce0: 416e 6450 7269 6e74 496e 7075 7441 7342  AndPrintInputAsB
00000cf0: 6974 7328 696e 7075 7429 3b0a 2020 7d0a  its(input);.  }.
00000d00: 2020 7265 7475 726e 2030 3b0a 7d0a         return 0;.}.
